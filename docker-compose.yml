services:
  db:
    image: postgres:latest
    container_name: postgres-db
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: x3akqrtww
      POSTGRES_USER: postgres
      POSTGRES_DB: auth_db
    volumes:
      - postgresdata:/var/lib/postgresql/data
    networks:
      - backend

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: always
    ports:
      - "8888:8080"
    networks:
      - backend

  mongo:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
    volumes:
      - mongodata:/data/db
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    restart: always
    command: redis-server --requirepass redispassword
    volumes:
      - redisdata:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispassword", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper
#    restart: always
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    networks:
#      - backend

  # ========================================================================
  # KAFKA SETUP: Choose ONE of the following options
  # Version Information:
  # - Traditional with Zookeeper: Any Confluent version (recommended: 7.4.0 stable)
  # - KRaft mode (no Zookeeper): Available from 2.8+ (Confluent 7.0+)
  # - Production ready KRaft: 3.3+ (Confluent 7.3+)
  # ========================================================================

  # OPTION 1: Traditional Kafka with Zookeeper (FIXED VERSION)
  # CURRENT SETUP: Single Kafka Broker - FIXED for KAFKA_PROCESS_ROLES error
  # Version: 7.4.0 (stable) - alternatives: 7.3.0 (LTS), 7.5.0 (newer features)
#  kafka:
#    image: confluentinc/cp-kafka:7.4.0  # Fixed version instead of latest
#    container_name: kafka
#    restart: always
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT  # Added for stability
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT  # Added for stability
#      # Single broker settings
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
#      KAFKA_MIN_IN_SYNC_REPLICAS: 1
#      # FIXED: Explicitly disable KRaft mode to use Zookeeper
#      KAFKA_PROCESS_ROLES: ""
#      KAFKA_NODE_ID: ""
#      KAFKA_CONTROLLER_QUORUM_VOTERS: ""
#      KAFKA_CONTROLLER_LISTENER_NAMES: ""
#    volumes:
#      - kafkadata:/var/lib/kafka/data
#    networks:
#      - backend
#    healthcheck:
#      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
#      interval: 30s
#      timeout: 10s
#      retries: 3

  # OPTION 2: Modern KRaft Kafka (No Zookeeper) - UNCOMMENT TO USE
  # Comment out the kafka service above and zookeeper service, then uncomment below
  # Version Notes: KRaft mode is available from Kafka 2.8+ (Confluent 7.0+)
  # Recommended versions: 7.4.0 (stable), 7.5.0+ (latest features)
  # kafka-kraft:
  #   image: confluentinc/cp-kafka:7.4.0  # Stable KRaft version - can also use 7.5.0 or latest
  #   container_name: kafka-kraft
  #   restart: always
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
  #     KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-kraft:29092,PLAINTEXT_HOST://localhost:9092'
  #     KAFKA_LISTENERS: 'PLAINTEXT://kafka-kraft:29092,CONTROLLER://kafka-kraft:29093,PLAINTEXT_HOST://0.0.0.0:9092'
  #     KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
  #     KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-kraft:29093'
  #     KAFKA_PROCESS_ROLES: 'broker,controller'  # KRaft mode: combined broker and controller
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  #   volumes:
  #     - kafkadata:/tmp/kraft-combined-logs
  #   networks:
  #     - backend
  #   command: >
  #     bash -c "
  #     # Generate cluster ID if not exists
  #     if [ ! -f /tmp/kraft-combined-logs/meta.properties ]; then
  #       echo 'Formatting Kafka storage...'
  #       kafka-storage format --config /etc/kafka/kafka.properties --cluster-id 'MkU3OEVBNTcwNTJENDM2Qk'
  #     fi
  #
  #     # Start Kafka
  #     /etc/confluent/docker/run
  #     "

  # Kafka UI for monitoring and management
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    restart: always
#    depends_on:
#      kafka:
#        condition: service_healthy  # Wait for Kafka to be healthy
#    ports:
#      - "8080:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local-cluster
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092  # Single broker
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#      KAFKA_CLUSTERS_0_READONLY: false
#      DYNAMIC_CONFIG_ENABLED: true
#      LOGGING_LEVEL_ROOT: INFO
#    networks:
#      - backend
    # If using KRaft mode, change the environment to:
    # environment:
    #   KAFKA_CLUSTERS_0_NAME: kraft-cluster
    #   KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-kraft:29092
    #   KAFKA_CLUSTERS_0_READONLY: false
    #   DYNAMIC_CONFIG_ENABLED: true
    #   LOGGING_LEVEL_ROOT: INFO

  # Redis GUI - RedisInsight (Official Redis GUI)
  redis-insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis-insight
    restart: always
    depends_on:
      redis:
        condition: service_healthy  # Wait for Redis to be ready
    ports:
      - "8001:8001"
    volumes:
      - redis-insight-data:/db
    networks:
      - backend
    environment:
      - RIPORT=8001
      - RIHOMEDIR=/db
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8001/healthcheck/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Alternative Redis GUI - Redis Commander (Lightweight option)
  # Uncomment if you prefer Redis Commander over RedisInsight
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: redis-commander
  #   restart: always
  #   depends_on:
  #     - redis
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     REDIS_HOSTS: "local:redis-cache:6379:0:redispassword"
  #     HTTP_USER: admin
  #     HTTP_PASSWORD: admin
  #   networks:
  #     - backend

  # ========================================================================
  # SCALING TO MULTIPLE BROKERS: Uncomment and modify sections below
  # ========================================================================

  # STEP 1: Replace single kafka service above with these 3 broker services
  # Multi-broker versions: Use same version across all brokers for compatibility
  # kafka-broker-1:
  #   image: confluentinc/cp-kafka:7.4.0  # Recommended: 7.4.0 (stable) or 7.3.0 (LTS)
  #   container_name: kafka-broker-1
  #   restart: always
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     # Multi-broker settings for high availability
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
  #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  #     KAFKA_MIN_IN_SYNC_REPLICAS: 2
  #     # Disable KRaft mode for Zookeeper setup
  #     KAFKA_PROCESS_ROLES: ""
  #     KAFKA_NODE_ID: ""
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: ""
  #     KAFKA_CONTROLLER_LISTENER_NAMES: ""
  #   volumes:
  #     - kafka1data:/var/lib/kafka/data
  #   networks:
  #     - backend

  # kafka-broker-2:
  #   image: confluentinc/cp-kafka:7.4.0  # Match version with broker-1
  #   container_name: kafka-broker-2
  #   restart: always
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9093:9093"
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
  #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  #     KAFKA_MIN_IN_SYNC_REPLICAS: 2
  #     # Disable KRaft mode for Zookeeper setup
  #     KAFKA_PROCESS_ROLES: ""
  #     KAFKA_NODE_ID: ""
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: ""
  #     KAFKA_CONTROLLER_LISTENER_NAMES: ""
  #   volumes:
  #     - kafka2data:/var/lib/kafka/data
  #   networks:
  #     - backend

  # kafka-broker-3:
  #   image: confluentinc/cp-kafka:7.4.0  # Match version with broker-1 and broker-2
  #   container_name: kafka-broker-3
  #   restart: always
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9094:9094"
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9094
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
  #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  #     KAFKA_MIN_IN_SYNC_REPLICAS: 2
  #     # Disable KRaft mode for Zookeeper setup
  #     KAFKA_PROCESS_ROLES: ""
  #     KAFKA_NODE_ID: ""
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: ""
  #     KAFKA_CONTROLLER_LISTENER_NAMES: ""
  #   volumes:
  #     - kafka3data:/var/lib/kafka/data
  #   networks:
  #     - backend

  # STEP 2: Update kafka-ui service to use multiple brokers
  # Replace kafka-ui environment with:
  # environment:
  #   KAFKA_CLUSTERS_0_NAME: multi-broker-cluster
  #   KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094
  #   KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #   KAFKA_CLUSTERS_0_READONLY: false
  #   DYNAMIC_CONFIG_ENABLED: true
  # depends_on:
  #   - kafka-broker-1
  #   - kafka-broker-2
  #   - kafka-broker-3

  # STEP 3: Optional - Add Kafka Connect for advanced integrations
  # Version compatibility: Use same major version as Kafka brokers
  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:7.4.0  # Must match Kafka version for compatibility
  #   container_name: kafka-connect
  #   restart: always
  #   depends_on:
  #     - kafka-broker-1  # Change to kafka for single broker
  #     - kafka-broker-2  # Remove for single broker
  #     - kafka-broker-3  # Remove for single broker
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094  # Change to kafka:9092 for single broker
  #     CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3  # Change to 1 for single broker
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3   # Change to 1 for single broker
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3   # Change to 1 for single broker
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #   volumes:
  #     - kafka-connect-data:/var/lib/kafka/data
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

volumes:
  mongodata:
  postgresdata:
  redisdata:
#  kafkadata:
  redis-insight-data:
  # Add these volumes when scaling to multiple brokers:
  # kafka1data:
  # kafka2data:
  # kafka3data:
  # kafka-connect-data: